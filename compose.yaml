services:
  nginx:
    image: nginx:1.26.1-alpine
    ports: 
      - 8080:8080
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - public
    restart: always
    depends_on:
      flask:
        condition: service_healthy
        restart: true

  flask:
    build: 
      context: flask-app  #folder where app is
      dockerfile: Dockerfile #dockerfile name
    image: reactiv3dev/flask:latest
    #ports are no longer needed to be expose because it will be in networks
    #ports:
    #  - 7070:8080
    env_file:
      - ./flask-app/.env
    environment:
      - APP_VERSION=0.1.0
      - APP_TOKEN=${APP_TOKEN} # docker will warn us if this is not set!
    volumes:
      - flask-data:/data
      # or by using :bind mounts:'
      #- ./flask-app/my_data:/data
    networks:
      - public ## In order to communicate with nginx
      - private ## In order to communicate with database
    depends_on:
      - postgres
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/about"]
      interval: 5s
      retries: 5
      start_period: 15s
      timeout: 5s

  postgres:
    image: postgres:16.3
    ### No need for exposing ports it is in private network with flask app
    #ports: 
    #  - 5432:5432
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: flask_api_db
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
    secrets:
      - pg_password
    volumes: 
      - postgres-data:/var/lib/postgresql/data
    networks:
      - private
    restart: always

configs:
  nginx_config:
    file: ./nginx.config

volumes:
  flask-data:
  postgres-data:

networks:
  public:
  private: 
    driver: bridge
    ipam: 
      config:
       - subnet: "10.0.0.0/19"
         gateway: "10.0.0.1"
secrets:
  pg_password:
    file: ./pg_password.txt